# ebites_bot.py

import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("ebites.env")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ò–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ ===
from database import init_db, add_user, get_user, update_user, update_filters, set_status, \
    find_compatible, create_chat, get_companion, delete_chat

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class ProfileStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_gender = State()
    waiting_for_city = State()
    waiting_for_city_manual = State()

class FilterStates(StatesGroup):
    waiting_for_gender = State()
    waiting_for_age_min = State()
    waiting_for_age_max = State()
    waiting_for_city = State()

# --- –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ ---
# –ü–æ–ª
gender_inline_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male"),
     InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
])

# –í–æ–∑—Ä–∞—Å—Ç (–∫–Ω–æ–ø–∫–∏)
age_inline_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="18-25", callback_data="age_18_25"),
     InlineKeyboardButton(text="26-35", callback_data="age_26_35")],
    [InlineKeyboardButton(text="36-50", callback_data="age_36_50"),
     InlineKeyboardButton(text="51-100", callback_data="age_51_100")]
])

# –ì–æ—Ä–æ–¥
city_inline_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ú–æ—Å–∫–≤–∞", callback_data="city_–ú–æ—Å–∫–≤–∞")],
    [InlineKeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data="city_–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")],
    [InlineKeyboardButton(text="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", callback_data="city_–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")],
    [InlineKeyboardButton(text="–î—Ä—É–≥–æ–π", callback_data="city_other")]
])

# –§–∏–ª—å—Ç—Ä—ã: –ø–æ–ª
filter_gender_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–õ—é–±–æ–π", callback_data="filter_gender_any"),
     InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="filter_gender_–ú—É–∂—Å–∫–æ–π"),
     InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="filter_gender_–ñ–µ–Ω—Å–∫–∏–π")]
])

# --- –ú–µ–Ω—é ---
def get_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")],
            [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")]
        ],
        resize_keyboard=True
    )

def get_in_chat_menu():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")]],
        resize_keyboard=True
    )

def get_searching_menu():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîç –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫")]],
        resize_keyboard=True
    )

def get_back_button():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

# --- /start ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    add_user(user_id)
    await state.clear()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        "–Ø ‚Äî –∞–Ω–æ–Ω–∏–º–Ω—ã–π –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤.\n"
        "–ó–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞—á–Ω–∏ –æ–±—â–µ–Ω–∏–µ!",
        reply_markup=get_main_menu()
    )

# --- –ü—Ä–æ—Ñ–∏–ª—å ---
@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message, state: FSMContext):
    user = get_user(message.from_user.id)
    if not user["profile"]["name"]:
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è:")
        await state.set_state(ProfileStates.waiting_for_name)
        return

    p = user["profile"]
    text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"‚Ä¢ –ò–º—è: {p['name']}\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {p['age']}\n"
        f"‚Ä¢ –ü–æ–ª: {p['gender']}\n"
        f"‚Ä¢ –ì–æ—Ä–æ–¥: {p['city']}\n\n"
        f"üîß –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")],
            [KeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç")],
            [KeyboardButton(text="‚öß –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª")],
            [KeyboardButton(text="üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer(text, parse_mode="HTML", reply_markup=kb)

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back_to_main(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=get_main_menu())

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ ---
@dp.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
async def edit_name(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:", reply_markup=get_back_button())
    await state.set_state(ProfileStates.waiting_for_name)

@dp.message(ProfileStates.waiting_for_name)
async def get_new_name(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await go_back_to_main(message, state)
        return
    if not message.text.isalpha() or len(message.text) > 50:
        await message.answer("–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    await state.update_data(name=message.text)
    await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=age_inline_kb)
    await state.set_state(ProfileStates.waiting_for_age)

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ ---
@dp.message(F.text == "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç")
async def edit_age(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=age_inline_kb)

@dp.callback_query(F.data.startswith("age_"))
async def handle_age_choice(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data.split("_")
    age_min = int(data[1])
    age_max = int(data[2])
    age_display = f"{age_min}‚Äì{age_max}"
    await state.update_data(age=age_max)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
    await callback.message.edit_text(f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {age_display}")
    await callback.message.answer("‚öß –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=gender_inline_kb)
    await state.set_state(ProfileStates.waiting_for_gender)
    await callback.answer()

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–∞ ---
@dp.message(F.text == "‚öß –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª")
async def edit_gender(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=gender_inline_kb)

@dp.callback_query(F.data.in_(["gender_male", "gender_female"]))
async def handle_gender_choice(callback: types.CallbackQuery, state: FSMContext):
    gender = "–ú—É–∂—Å–∫–æ–π" if callback.data == "gender_male" else "–ñ–µ–Ω—Å–∫–∏–π"
    await state.update_data(gender=gender)
    await callback.message.edit_text(f"‚úÖ –ü–æ–ª: {gender}")
    await callback.message.answer("üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_inline_kb)
    await state.set_state(ProfileStates.waiting_for_city)
    await callback.answer()

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ ---
@dp.message(F.text == "üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
async def edit_city(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_inline_kb)

@dp.callback_query(F.data.startswith("city_"))
async def handle_city_choice(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_", 1)[1]
    if city == "other":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é:", reply_markup=get_back_button())
        await state.set_state(ProfileStates.waiting_for_city_manual)
        await callback.answer()
        return

    data = await state.get_data()
    user_id = callback.from_user.id
    name = data.get("name", get_user(user_id)["profile"]["name"])
    age = data.get("age", get_user(user_id)["profile"]["age"])
    gender = data.get("gender", get_user(user_id)["profile"]["gender"])

    update_user(user_id, name, age, gender, city)
    set_status(user_id, "idle")
    await callback.message.edit_text(f"‚úÖ –ì–æ—Ä–æ–¥: {city}")
    await callback.message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_main_menu())
    await state.clear()
    await callback.answer()

@dp.message(ProfileStates.waiting_for_city_manual)
async def enter_city_manual(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await go_back_to_main(message, state)
        return
    if not message.text.replace(" ", "").isalpha() or len(message.text) > 30:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        return
    data = await state.get_data()
    user_id = message.from_user.id
    name = data.get("name", get_user(user_id)["profile"]["name"])
    age = data.get("age", get_user(user_id)["profile"]["age"])
    gender = data.get("gender", get_user(user_id)["profile"]["gender"])
    update_user(user_id, name, age, gender, message.text)
    await message.answer("‚úÖ –ì–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_main_menu())
    await state.clear()

# --- –§–∏–ª—å—Ç—Ä—ã ---
@dp.message(F.text == "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
async def filters_menu(message: types.Message):
    kb = [
        [KeyboardButton(text="–ü–æ–ª")],
        [KeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç")],
        [KeyboardButton(text="–ì–æ—Ä–æ–¥")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    markup = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=markup)

@dp.message(F.text == "–ü–æ–ª")
async def ask_gender_filter(message: types.Message):
    await message.answer("‚öß –ö–æ–≥–æ –∏—Å–∫–∞—Ç—å?", reply_markup=filter_gender_kb)

@dp.callback_query(F.data.startswith("filter_gender_"))
async def set_gender_filter(callback: types.CallbackQuery):
    gender = callback.data.split("_", 2)[2]
    gender_display = "any" if gender == "–õ—é–±–æ–π" else gender
    update_filters(callback.from_user.id, preferred_gender=gender_display)
    await callback.message.edit_text(f"‚úÖ –ü–æ–ª —Ñ–∏–ª—å—Ç—Ä–∞: {gender}")
    await callback.message.answer("–§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=get_main_menu())
    await callback.answer()

@dp.message(F.text == "–í–æ–∑—Ä–∞—Å—Ç")
async def ask_age_min_filter(message: types.Message, state: FSMContext):
    await message.answer("–ú–∏–Ω. –≤–æ–∑—Ä–∞—Å—Ç (18-100):", reply_markup=get_back_button())
    await state.set_state(FilterStates.waiting_for_age_min)

@dp.message(FilterStates.waiting_for_age_min)
async def set_min_age_filter(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await go_back_to_main(message, state)
        return
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    age_min = int(message.text)
    if not (18 <= age_min <= 100):
        await message.answer("–û—Ç 18 –¥–æ 100.")
        return
    await state.update_data(age_min=age_min)
    await message.answer("–ú–∞–∫—Å. –≤–æ–∑—Ä–∞—Å—Ç (18-100):")
    await state.set_state(FilterStates.waiting_for_age_max)

@dp.message(FilterStates.waiting_for_age_max)
async def set_max_age_filter(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await go_back_to_main(message, state)
        return
    data = await state.get_data()
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    age_max = int(message.text)
    if not (18 <= age_max <= 100):
        await message.answer("–û—Ç 18 –¥–æ 100.")
        return
    if age_max < data["age_min"]:
        await message.answer("‚ùå –ú–∞–∫—Å. < –º–∏–Ω.")
        return
    update_filters(message.from_user.id, min_age=data["age_min"], max_age=age_max)
    await message.answer("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_main_menu())
    await state.clear()

@dp.message(F.text == "–ì–æ—Ä–æ–¥")
async def ask_city_filter(message: types.Message, state: FSMContext):
    await message.answer("–ì–æ—Ä–æ–¥ (–∏–ª–∏ '–ª—é–±–æ–π'):", reply_markup=get_back_button())
    await state.set_state(FilterStates.waiting_for_city)

@dp.message(FilterStates.waiting_for_city)
async def set_city_filter(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await go_back_to_main(message, state)
        return
    city = "any" if message.text.lower() == "–ª—é–±–æ–π" else message.text
    update_filters(message.from_user.id, city=city)
    await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞: {city}", reply_markup=get_main_menu())
    await state.clear()

# --- –ü–æ–∏—Å–∫ ---
@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def start_search(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if user["status"] == "chatting":
        await message.answer("–í—ã –≤ —á–∞—Ç–µ!", reply_markup=get_in_chat_menu())
        return
    if user["status"] == "searching":
        await message.answer("–í—ã —É–∂–µ –∏—â–µ—Ç–µ!", reply_markup=get_searching_menu())
        return
    if not all([user["profile"]["name"], user["profile"]["age"], user["profile"]["gender"], user["profile"]["city"]]):
        await message.answer("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å!")
        return

    set_status(user_id, "searching")
    await message.answer("üîé –ò—â–µ–º...", reply_markup=get_searching_menu())
    asyncio.create_task(find_partner_with_timeout(user_id))

async def find_partner_with_timeout(user_id: int):
    try:
        # --- –≠—Ç–∞–ø 1: –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ (15 —Å–µ–∫—É–Ω–¥) ---
        for _ in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏ √ó 5 —Å–µ–∫ = 15 —Å–µ–∫
            await asyncio.sleep(5)
            if get_user(user_id)["status"] != "searching":  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–π—Ç–∏
                return
            candidates = find_compatible(user_id)
            for cand in candidates:
                companion_id = cand["user_id"]
                if get_user(companion_id)["status"] == "searching":
                    create_chat(user_id, companion_id)
                    set_status(user_id, "chatting")
                    set_status(companion_id, "chatting")
                    await bot.send_message(user_id, "üéâ –ù–∞—à–ª–∏! –ü–∏—à–∏—Ç–µ:", reply_markup=get_in_chat_menu())
                    await bot.send_message(companion_id, "üéâ –ù–∞—à–ª–∏! –ñ–¥—ë–º:", reply_markup=get_in_chat_menu())
                    return

        # --- –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å—ë –µ—â—ë –∏—â–µ–º? ---
        if get_user(user_id)["status"] != "searching":
            return

        # --- –≠—Ç–∞–ø 3: –†–∞—Å—à–∏—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã ---
        user = get_user(user_id)
        new_max_age = min(user["preferences"]["age_max"] + 10, 99)
        new_gender = "any"
        new_city = "any"

        update_filters(user_id, preferred_gender=new_gender, max_age=new_max_age, city=new_city)
        set_status(user_id, "searching")  # –ü–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞

        await bot.send_message(
    user_id,
    f"üîç –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –†–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫:\n"
    f"‚Ä¢ –ü–æ–ª: –ª—é–±–æ–π\n"
    f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: –¥–æ {new_max_age}\n"
    f"‚Ä¢ –ì–æ—Ä–æ–¥: –ª—é–±–æ–π\n"
    f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–∫–∞—Ç—å‚Ä¶"
)

        # --- –≠—Ç–∞–ø 4: –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ ---
        while True:
            if get_user(user_id)["status"] != "searching":
                return
            candidates = find_compatible(user_id)
            for cand in candidates:
                companion_id = cand["user_id"]
                if get_user(companion_id)["status"] == "searching":
                    create_chat(user_id, companion_id)
                    set_status(user_id, "chatting")
                    set_status(companion_id, "chatting")
                    await bot.send_message(user_id, "üéâ –ù–∞—à–ª–∏! –ü–∏—à–∏—Ç–µ:", reply_markup=get_in_chat_menu())
                    await bot.send_message(companion_id, "üéâ –ù–∞—à–ª–∏! –ñ–¥—ë–º:", reply_markup=get_in_chat_menu())
                    return
            await asyncio.sleep(3)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_main_menu())
        set_status(user_id, "idle")

# --- –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ ---
@dp.message(F.text == "üîç –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫")
async def cancel_search(message: types.Message):
    user_id = message.from_user.id
    if get_user(user_id)["status"] == "searching":
        set_status(user_id, "idle")
    await message.answer("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=get_main_menu())

# --- –ß–∞—Ç ---
@dp.message(F.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")
async def exit_chat(message: types.Message):
    user_id = message.from_user.id
    comp_id = get_companion(user_id)
    if not comp_id:
        await message.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ.", reply_markup=get_main_menu())
        return
    delete_chat(user_id)
    set_status(user_id, "idle")
    set_status(comp_id, "idle")
    await bot.send_message(comp_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª.", reply_markup=get_main_menu())
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞.", reply_markup=get_main_menu())

@dp.message(F.text, F.text != "üö™ –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")
async def chat_message(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    if user["status"] != "chatting":
        return
    comp_id = get_companion(user_id)
    if not comp_id:
        await message.answer("–í—ã –Ω–µ –≤ —á–∞—Ç–µ.", reply_markup=get_main_menu())
        return
    try:
        await bot.send_message(comp_id, message.text)
    except Exception:
        await message.answer("‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
        await exit_chat(message)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    init_db()
    print("üü¢ –ë–æ—Ç @anon_ebites_bot –∑–∞–ø—É—â–µ–Ω!")
    dp.run_polling(bot)