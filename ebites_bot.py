import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramNetworkError
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv("ebites.env")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CITIES = [
    "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
    "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–°–∞–º–∞—Ä–∞", "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"
]

bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
users_db = {}
active_chats = {}
searching_users = set()

class User:
    def __init__(self):
        self.name = ""
        self.age = 0
        self.gender = ""
        self.city = ""
        self.preferences = {
            "gender": "any",
            "age_min": 18,
            "age_max": 30,
            "city": "any"
        }
        self.status = "idle"  # idle/searching/chatting

class Form(StatesGroup):
    name = State()
    age = State()
    gender = State()
    city_confirm = State()
    city_manual = State()

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in users_db:
        users_db[user_id] = User()
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(Form.name)
    else:
        await show_main_menu(user_id)

async def show_main_menu(user_id: int):
    user = users_db[user_id]
    kb = []
    
    if user.status == "idle":
        kb = [
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ]
    elif user.status == "searching":
        kb = [
            [KeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ]
    elif user.status == "chatting":
        kb = [
            [KeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")],
            [KeyboardButton(text="‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è")]
        ]

    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

# ========== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ==========
@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    users_db[message.from_user.id].name = message.text
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    await state.set_state(Form.age)

@dp.message(Form.age)
async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    
    age = int(message.text)
    if age < 5 or age > 100:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (5-100 –ª–µ—Ç)")
        return
    
    users_db[message.from_user.id].age = age
    kb = [
        [InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
        [InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
    ]
    await message.answer("–í–∞—à –ø–æ–ª:", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
    await state.set_state(Form.gender)

@dp.callback_query(F.data.startswith("gender_"))
async def process_gender(callback: types.CallbackQuery, state: FSMContext):
    gender = callback.data.split("_")[1]
    users_db[callback.from_user.id].gender = gender
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏ (2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
    kb = []
    for i in range(0, len(CITIES), 2):
        row = CITIES[i:i+2]
        kb.append([KeyboardButton(text=city) for city in row])
    
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await callback.message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞? –í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=keyboard)
    await state.set_state(Form.city_confirm)
    await callback.answer()

@dp.message(Form.city_confirm)
async def confirm_city(message: types.Message, state: FSMContext):
    if message.text not in CITIES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return
    
    if message.text == "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(Form.city_manual)
    else:
        users_db[message.from_user.id].city = message.text
        await complete_registration(message.from_user.id)

@dp.message(Form.city_manual)
async def process_custom_city(message: types.Message, state: FSMContext):
    if len(message.text) < 2:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    users_db[message.from_user.id].city = message.text
    await complete_registration(message.from_user.id)

async def complete_registration(user_id: int):
    await bot.send_message(user_id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await show_main_menu(user_id)

# ========== –ü–û–ò–°–ö –°–û–ë–ï–°–ï–î–ù–ò–ö–ê ==========
@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def start_search(message: types.Message):
    user_id = message.from_user.id
    user = users_db[user_id]
    
    if user.status != "idle":
        return
    
    user.status = "searching"
    searching_users.add(user_id)
    await message.answer("üîé –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
    await show_main_menu(user_id)
    await find_companion(user_id)

async def find_companion(user_id: int):
    if user_id not in searching_users:
        return
    
    user = users_db[user_id]
    
    for candidate_id in searching_users:
        if candidate_id == user_id:
            continue
            
        candidate = users_db[candidate_id]
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (user.preferences["gender"] in ["any", candidate.gender] and
            candidate.preferences["gender"] in ["any", user.gender] and
            user.preferences["age_min"] <= candidate.age <= user.preferences["age_max"] and
            candidate.preferences["age_min"] <= user.age <= candidate.preferences["age_max"] and
            (user.preferences["city"] == "any" or user.preferences["city"] == candidate.city) and
            (candidate.preferences["city"] == "any" or candidate.preferences["city"] == user.city)):
            
            # –°–æ–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_chats[user_id] = candidate_id
            active_chats[candidate_id] = user_id
            
            searching_users.discard(user_id)
            searching_users.discard(candidate_id)
            
            user.status = "chatting"
            candidate.status = "chatting"
            
            await bot.send_message(user_id, "üí¨ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ")
            await bot.send_message(candidate_id, "üí¨ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ")
            await show_main_menu(user_id)
            await show_main_menu(candidate_id)
            return
    
    # –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
    await asyncio.sleep(5)
    await find_companion(user_id)

@dp.message(F.text == "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫")
async def stop_search(message: types.Message):
    user_id = message.from_user.id
    user = users_db[user_id]
    
    if user.status == "searching":
        user.status = "idle"
        searching_users.discard(user_id)
        await message.answer("üîç –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await show_main_menu(user_id)

# ========== –ß–ê–¢ ==========
@dp.message(lambda m: m.from_user.id in active_chats)
async def chat_message(message: types.Message):
    companion_id = active_chats[message.from_user.id]
    await bot.send_message(companion_id, message.text)

@dp.message(F.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")
async def leave_chat(message: types.Message):
    user_id = message.from_user.id
    user = users_db[user_id]
    
    if user.status == "chatting" and user_id in active_chats:
        companion_id = active_chats[user_id]
        companion = users_db[companion_id]
        
        del active_chats[user_id]
        del active_chats[companion_id]
        
        user.status = "idle"
        companion.status = "idle"
        
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞")
        await bot.send_message(companion_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç")
        await show_main_menu(user_id)
        await show_main_menu(companion_id)

# ========== –ó–ê–ü–£–°–ö ==========
@dp.errors(TelegramNetworkError)
async def handle_network_error(event, bot):
    logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {event.exception}")
    await asyncio.sleep(5)

if __name__ == "__main__":
    logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    dp.run_polling(bot)